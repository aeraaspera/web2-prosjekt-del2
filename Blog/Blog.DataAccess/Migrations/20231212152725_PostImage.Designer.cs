// <auto-generated />
using System;
using Blog.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231212152725_PostImage")]
    partial class PostImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Blog.Common.Model.Entity.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogID"), 1L, 1);

                    b.Property<string>("BlogDetails")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlogOwnerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogStatus")
                        .HasColumnType("int");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ObjectOwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogID");

                    b.HasIndex("BlogOwnerID");

                    b.ToTable("Blogs", (string)null);

                    b.HasData(
                        new
                        {
                            BlogID = 1,
                            BlogDetails = "blogg 1",
                            BlogOwnerID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            BlogStatus = 1,
                            BlogTitle = "Blogg 1",
                            ObjectOwnerId = "da95eee9-1a63-479f-9f5a-cd42e5c40447"
                        },
                        new
                        {
                            BlogID = 2,
                            BlogDetails = "blogg 2",
                            BlogOwnerID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            BlogStatus = 1,
                            BlogTitle = "Blogg 2",
                            ObjectOwnerId = "03476509-75e5-4978-b2a7-46ec298bbf72"
                        },
                        new
                        {
                            BlogID = 3,
                            BlogDetails = "blogg 3",
                            BlogOwnerID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            BlogStatus = 0,
                            BlogTitle = "Blogg 3",
                            ObjectOwnerId = "03476509-75e5-4978-b2a7-46ec298bbf72"
                        });
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"), 1L, 1);

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("CommentDetails")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CommentOwnerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ObjectOwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentOwnerID");

                    b.HasIndex("PostID");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            CommentID = 1,
                            BlogID = 1,
                            CommentDetails = "kommentar 1",
                            CommentOwnerID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            CommentTitle = "Kommentar 1",
                            DateCreated = new DateTime(2023, 12, 11, 14, 27, 0, 0, DateTimeKind.Unspecified),
                            ObjectOwnerId = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            PostID = 1
                        },
                        new
                        {
                            CommentID = 2,
                            BlogID = 1,
                            CommentDetails = "kommentar 2",
                            CommentOwnerID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            CommentTitle = "Kommentar 2",
                            DateCreated = new DateTime(2023, 12, 11, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            ObjectOwnerId = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            PostID = 1
                        },
                        new
                        {
                            CommentID = 3,
                            BlogID = 1,
                            CommentDetails = "kommentar 3",
                            CommentOwnerID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            CommentTitle = "Kommentar 3",
                            DateCreated = new DateTime(2023, 12, 11, 14, 50, 0, 0, DateTimeKind.Unspecified),
                            ObjectOwnerId = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            PostID = 2
                        },
                        new
                        {
                            CommentID = 4,
                            BlogID = 1,
                            CommentDetails = "kommentar 4",
                            CommentOwnerID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            CommentTitle = "Kommentar 4",
                            DateCreated = new DateTime(2023, 12, 11, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            ObjectOwnerId = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            PostID = 2
                        },
                        new
                        {
                            CommentID = 5,
                            BlogID = 2,
                            CommentDetails = "kommentar 5",
                            CommentOwnerID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            CommentTitle = "Kommentar 5",
                            DateCreated = new DateTime(2023, 12, 11, 17, 5, 0, 0, DateTimeKind.Unspecified),
                            ObjectOwnerId = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            PostID = 3
                        });
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"), 1L, 1);

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectOwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PostOwnerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PostID");

                    b.HasIndex("BlogID");

                    b.HasIndex("PostOwnerID");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            PostID = 1,
                            BlogID = 1,
                            DateCreated = new DateTime(2023, 12, 11, 14, 25, 0, 0, DateTimeKind.Unspecified),
                            FileName = "flower.png",
                            ObjectOwnerId = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            PostDetails = "post 1",
                            PostOwnerID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            PostTitle = "Post 1"
                        },
                        new
                        {
                            PostID = 2,
                            BlogID = 1,
                            DateCreated = new DateTime(2023, 12, 11, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            FileName = "flower.png",
                            ObjectOwnerId = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            PostDetails = "post 2",
                            PostOwnerID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            PostTitle = "Post 2"
                        },
                        new
                        {
                            PostID = 3,
                            BlogID = 2,
                            DateCreated = new DateTime(2023, 12, 11, 16, 25, 0, 0, DateTimeKind.Unspecified),
                            FileName = "flower.png",
                            ObjectOwnerId = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            PostDetails = "post 3",
                            PostOwnerID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            PostTitle = "Post 3"
                        });
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.PostTag", b =>
                {
                    b.Property<int>("PostTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostTagID"), 1L, 1);

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("PostTagID");

                    b.HasIndex("PostID");

                    b.HasIndex("TagID");

                    b.ToTable("PostTags", (string)null);

                    b.HasData(
                        new
                        {
                            PostTagID = 1,
                            PostID = 1,
                            TagID = 1
                        },
                        new
                        {
                            PostTagID = 2,
                            PostID = 1,
                            TagID = 2
                        },
                        new
                        {
                            PostTagID = 3,
                            PostID = 1,
                            TagID = 4
                        },
                        new
                        {
                            PostTagID = 4,
                            PostID = 2,
                            TagID = 5
                        },
                        new
                        {
                            PostTagID = 5,
                            PostID = 2,
                            TagID = 2
                        },
                        new
                        {
                            PostTagID = 6,
                            PostID = 3,
                            TagID = 3
                        });
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TagID");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            TagID = 1,
                            TagName = "tag 1"
                        },
                        new
                        {
                            TagID = 2,
                            TagName = "tag 2"
                        },
                        new
                        {
                            TagID = 3,
                            TagName = "tag 3"
                        },
                        new
                        {
                            TagID = 4,
                            TagName = "tag 4"
                        },
                        new
                        {
                            TagID = 5,
                            TagName = "tag 5"
                        });
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.UserSubscribedBlog", b =>
                {
                    b.Property<int>("UserSubscribedBlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSubscribedBlogID"), 1L, 1);

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.HasKey("UserSubscribedBlogID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("BlogID");

                    b.ToTable("UserSubscribedBlogs", (string)null);

                    b.HasData(
                        new
                        {
                            UserSubscribedBlogID = 1,
                            ApplicationUserID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            BlogID = 1
                        },
                        new
                        {
                            UserSubscribedBlogID = 2,
                            ApplicationUserID = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            BlogID = 2
                        },
                        new
                        {
                            UserSubscribedBlogID = 3,
                            ApplicationUserID = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            BlogID = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "da95eee9-1a63-479f-9f5a-cd42e5c40447",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bcf2f2d-51dd-4567-865b-cafbd324c1d6",
                            Email = "user1@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@TEST.COM",
                            NormalizedUserName = "USER1@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPFqvSMGpFizW9k2VI1NEENDDfBKK1dGx3djyG9IUIuG0SGtKbWMRcM/AnwEpAGOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab8ac3f9-07ce-4772-abe1-55d69b8d3ae6",
                            TwoFactorEnabled = false,
                            UserName = "user1@test.com"
                        },
                        new
                        {
                            Id = "03476509-75e5-4978-b2a7-46ec298bbf72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e1f3f62-55b8-459d-8e98-283c75158724",
                            Email = "user2@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@TEST.COM",
                            NormalizedUserName = "USER2@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAu3jnXTGtNUb3M9hI1qQ8yty96xbeIgZz/+NZEL2dthBl7dQKerpdwQbbgsIj7Saw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "169f6338-117c-493a-b137-a698f0144a2c",
                            TwoFactorEnabled = false,
                            UserName = "user2@test.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Blog", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "BlogOwner")
                        .WithMany()
                        .HasForeignKey("BlogOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogOwner");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Comment", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CommentOwner")
                        .WithMany()
                        .HasForeignKey("CommentOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Common.Model.Entity.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentOwner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Post", b =>
                {
                    b.HasOne("Blog.Common.Model.Entity.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "PostOwner")
                        .WithMany()
                        .HasForeignKey("PostOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("PostOwner");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.PostTag", b =>
                {
                    b.HasOne("Blog.Common.Model.Entity.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Common.Model.Entity.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.UserSubscribedBlog", b =>
                {
                    b.HasOne("Blog.Common.Model.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("UserSubscribedBlogs")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Common.Model.Entity.Blog", "Blog")
                        .WithMany("UserSubscribedBlogs")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Blog", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("UserSubscribedBlogs");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Blog.Common.Model.Entity.ApplicationUser", b =>
                {
                    b.Navigation("UserSubscribedBlogs");
                });
#pragma warning restore 612, 618
        }
    }
}
